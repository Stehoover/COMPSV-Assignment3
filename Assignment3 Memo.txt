This memo outlines the design and implementation of two custom data structures to support key features for the new Undo/Redo and help desk systems. The solution leverages fundamental abstract data types—Stacks and Queues—to simulate the required Undo/Redo functionality and customer support ticket management. Both structures are built from scratch using a linked list paradigm.

The Undo/Redo feature is designed to manage a user's action history. This is a perfect use case for a Stack, a LIFO (Last-In, First-Out) data structure. The system uses two separate stacks: an "undo stack" to track all performed actions and a "redo stack" to temporarily hold actions that have been undone.
When a user performs an action, it is pushed onto the undo stack, and the redo stack is cleared to prevent a corrupted history. An "undo" operation pops the most recent action from the undo stack and pushes it onto the redo stack. Conversely, a "redo" operation pops the action from the redo stack and pushes it back onto the undo stack, reapplying the change. This dual-stack approach elegantly manages the sequential, reversible nature of user edits.

The help desk system requires a fair, chronological management of customer inquiries. For this, a Queue data structure is ideal. A Queue operates on a FIFO (First-In, First-Out) principle, ensuring that the first customer to enter the queue is the first to be served.
Customers are "enqueued" (added to the back of the queue) when they request support. A support agent "dequeues" (removes from the front) the next waiting customer. The "peek" functionality allows agents to see who is next in line without removing them from the queue. This simple, transparent structure guarantees that no customer is unfairly prioritized or left behind. Both the Stack and Queue have been implemented using a fundamental Node class, which acts as a building block for a singly linked list. This design choice provides a lightweight and efficient solution.